#!/usr/bin/python3
# -*- coding: utf-8 -*-

plan_path = '~/.plan'

import os
import re
import json
import argparse
import datetime
import calendar

class Plan:
    def __init__(self, path):
        self.plan = self.get_plan(path)
        self.dow_map = {
            'mon': 0,
            'tue': 1,
            'wed': 2,
            'thu': 3,
            'fri': 4,
            'sat': 5,
            'sun': 6,
        }

    def get_plan(self, path):
        result = []
        with open(path) as f:
            items = f.readlines()
            for i in items:
                m = re.match(f'([^:]+):([^:]+):(.+)\n', i)
                if m:
                    t = m.group(1)
                    if t == 'm':
                        date = self.parse_month(m.group(2))
                    elif t == 'w':
                        date = m.group(2)
                    elif t == 'd':
                        date = self.parse_day(m.group(2))
                    else:
                        date = m.group(2)
                    
                    js = {
                        'type': t,
                        'date': date,
                        'description': m.group(3)
                    }
                    result.append(js)
        return(result)

    def parse_day(self, date_string):
        m = re.match('([0-9]+)/([0-9]+)', date_string)
        if m:
            now = datetime.datetime.now()
            mon = int(m.group(1))
            day = int(m.group(2))
            d = datetime.date(now.year, mon, day)
            return(d)

    def parse_month(self, date_string):
        m = re.match('([0-9]+)', date_string)
        if m:
            now = datetime.datetime.now()
            day = int(m.group(1))
            d = datetime.date(now.year, now.month, day)
            return(d)
        
    def filter(self, dt_from=None, dt_to=None):
        result = []

        if dt_from == None:
            dt_from = datetime.datetime.now()
            
        if dt_to == None:
            dt_to = dt_from()
            
        date_from = dt_from.date()
        date_to = dt_to.date()
            
        for p in self.plan:
            if p['type'] == 'w':
                dt = dt_from
                while dt <= dt_to:
                    day_of_week = dt.weekday()
                    if day_of_week == self.dow_map[p['date']]:
                        js = {
                            'type': p['type'],
                            'date': dt.date(),
                            'description': p['description']
                        }
                        result.append(js)
                    dt = dt + datetime.timedelta(days=1)
            else:
                if p['date'] >= date_from and p['date'] <= date_to: 
                    result.append(p)

        return(result)

    def print(self, items=None):
        dow_str = ['月', '火', '水', '木', '金', '土', '日']
        
        if items == None:
            items = self.plan

        sorted_items = sorted(items, key=lambda x: x['date']) 
            
        for i in sorted_items:
            dow = dow_str[i['date'].weekday()]
            month = i['date'].month
            day = i['date'].day
            desc = i['description']
            
            print(f'{month}/{day}({dow}): {desc}')

def parse_args(args):
    t = datetime.datetime.now()
    
    if args.tomorrow:
        dt_from = t + datetime.timedelta(days=1)
        dt_to = t + datetime.timedelta(days=1)
    elif args.this_week:
        day_of_week = t.weekday()
        dt_from = t - datetime.timedelta(days=day_of_week)
        dt_to = dt_from + datetime.timedelta(days=6)
    elif args.next_week:
        diff = -t.weekday() + 7
        dt_from = t + datetime.timedelta(days=diff)
        dt_to = dt_from + datetime.timedelta(days=6)
    elif args.month:
        dt_from = datetime.datetime(t.year, t.month, 1)
        month_days = calendar.monthrange(t.year, t.month)[1] - 1
        dt_to = dt_from + datetime.timedelta(days=month_days)
    else:
        dt_from = t
        dt_to = t
        
    return([dt_from, dt_to])
                
def main():
    parser = argparse.ArgumentParser(description='show the plan')
    parser.add_argument('-t', '--tomorrow', action='store_true', help='show the tomorrow\'s schedule')
    parser.add_argument('-tw', '--this_week', action='store_true', help='show the schedule in this week')
    parser.add_argument('-nw', '--next_week', action='store_true', help='show the schedule in next week')
    parser.add_argument('-m', '--month', action='store_true', help='show the schedule in this month')
    args = parser.parse_args()

    normalized_path = os.path.normpath(os.path.expanduser(plan_path))
    plan = Plan(normalized_path)

    dt_from, dt_to = parse_args(args)
    filtered = plan.filter(dt_from, dt_to)
    plan.print(filtered)
    
if __name__ == '__main__':
    main()
